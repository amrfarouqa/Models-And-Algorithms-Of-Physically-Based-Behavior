function AmrMohVar1Part1
close all; clc;

% geometry
mass=[0.1 2 2 0.1 2];        % Xmasses
rad=[0.2 0.2 0.2 0.2 0.2]; % Xradiuses for visualization
ind=[1 2 ;2 3 ; 2 4; 4 5; 5 3; 4 3;3 1];   % Xglobal numbers of nodes
cor=[ 1 2 ; 3 1; 3 4 ; 5 1; 5 3]; % Xcoordiantes of nodes
g=9.81;                      % Xacceleration of gravity
F=-[0 mass(1) 0 mass(2) 0 mass(3) 0 mass(4) 0 mass(5)]*g; % forces of gravity
IS= [1 0 0 0 1 1 0 0 0 1];  % Xconstraints for given velocities
KS= [0 0 0 0 1 1 0 0 0 0];
stiff=[10 20 20 20 10 10 10];        % Xstiffness
damp_rel=[2 10 10 10 2 2 2] ;   % relative damping
damp_abs=[1 1 1 1 1 1 1];        % absolute damping

llsk=2;  % degrees of freedom at node
nmz=length(mass); % number of nodes
NN=nmz*llsk;      % number of equations
U=zeros(NN,1);    % initial displacements and velocities
DU=zeros(NN,1);

TT=2; dt=0.01;   % integration time and step
nsteps=TT/dt;
t=0.1;               % initial time moment
Urez=zeros(NN,1);  % array for result displacements

%  prepare figure for visualization of the structure:
figure(1); set(gcf,'Color','white'); axis equal;axis ([0 6 -2 5]);grid on;box on
cla; hold on; visualization(U,ind,cor,rad,F,IS); hold off; %pause(0.01);
%pause

for i=1:nsteps
    % calculate displacements at the ith time step:
    DDU=accelerations(U,DU,t,mass,stiff,damp_rel,damp_abs,F,ind,cor,rad);
    DU=DU+dt*DDU';  % update velocities
    DU(find(IS))=0; % apply boundary conditions of velocities

    if t>=0.1 && t<=0.5
        %DU(find(KS))=-8*sin(1*t);
        DU(5)=-17.5*sin(1*t);
        DU(6)=-8.5*sin(1*t);
    end
    U=U+dt*DU;      % update displacements
    Urez(:,i+1)=U;  % store displacements in the result array
    % visualize structure:
    cla; hold on; visualization(U,ind,cor,rad,F,IS); hold off; pause(0.01);
    t=t+dt;
    
end




figure(2);hold on;

plot([0:dt:TT],Urez(1,:),'--b');
plot([0:dt:TT],Urez(2,:),'-b');
plot([0:dt:TT],Urez(3,:),'--r');
plot([0:dt:TT],Urez(4,:),'-r');
plot([0:dt:TT],Urez(5,:),'--g');
plot([0:dt:TT],Urez(6,:),'-g');
plot([0:dt:TT],Urez(7,:),'--m');
plot([0:dt:TT],Urez(8,:),'-m');
return
end

function DDU=accelerations(U,DU,t,mass,stiff,damp_rel,damp_abs,F,ind,cor,rad)
%*********************************************************************
%***** calculates forces which are applied to the construction *******
%***** nodes and divide them by masses at the ith time moment  *******
%*********************************************************************
llsk=2; nmz=length(mass);NN=nmz*llsk; nel=size(ind,1);

T=F;  % external forces are applied to the result force vector
for i=1:nel
    ri=ind(i,1);si=ind(i,2);  % nodal numbers of element
    r=[(ri-1)*llsk+1,ri*llsk];s=[(si-1)*llsk+1,si*llsk]; % degrees of freedom of the element
    cr=cor(ri,:)'+U(r); cs=cor(si,:)'+U(s);   % coordinates of the element nodes
    dur=DU(r);dus=DU(s);                      % velocities of the element nodes
    
    l0=norm(cor(si,:)-cor(ri,:));  % initial length of the element
    lrs=norm(cs-cr);               % current length of the element
    n=(cs-cr)/lrs;                 % direction of the element
    
    Trs=stiff(i)*(lrs-l0)+damp_rel(i)*dot( n, dus-dur); % force generated by the element
    
    % forces generated by the elemenbt are added to the result force vector
    T(r)=T(r)+Trs*n'; T(s)=T(s)-Trs*n';
end

% damping forces generated due to the absolete velocities at nodes are added to the result force vector
for i=1:nmz
    r=[(i-1)*llsk+1,i*llsk];
    DDU(r)=(T(r)-DU(r)'*damp_abs(i))/mass(i);
end

return
end


function visualization(U,ind,cor,rad,F,IS)
%********************************************************
% *****  visualize the structure with respect  **********
% *****  to the obtained displacements         **********
%********************************************************
nmz=length(rad);llsk=2;nel=size(ind,1);

xlim=get(gca,'XLim'); ylim=get(gca,'YLim'); % Limits of axis
xn=xlim(2)-xlim(1);yn=ylim(2)-ylim(1); %range of axis
range=min(xn,yn);           % lower range to determine force scale
maxForce=max(abs(F));       % maximum force
mast= range/maxForce*0.1;   % scale for the visualization of forces
constrLength=range/17;      % line length to determine constraints

for i=1:nmz
    % visualize particles :
    r=[(i-1)*llsk+1,i*llsk]; c=cor(i,:)'+U(r); % displacements of ith particle
    rd=rad(i);  % radius of ith particle
    % visualize round particle:
    rectangle('Position',[c'-rd,2*rd,2*rd],'Curvature',[1,1],'FaceColor',[0.4 0.6 1]);
    
    % visualize external forces:
    f=F(r)*mast; % scale force for visualization
    x1=c(1);x2=c(1)+f(1);y1=c(2);y2=c(2)+f(2); % end of arrow
    line([x1,x2],[y1,y2],'Color','red','LineWidth',1);
    varr=[x1-x2;y1-y2]; varr =varr/norm(varr)*range/40; % head of force vector
    alf=pi/6; transf = [cos(alf) sin(alf);-sin(alf) cos(alf)];
    varr1=transf*varr; line([x2, x2+varr1(1)],[y2, y2+varr1(2)],'Color','red','LineWidth',1);
    varr1=transf'*varr;line([x2, x2+varr1(1)],[y2, y2+varr1(2)],'Color','red','LineWidth',1);
    
    % visualize constraints :
    constr=IS(r); % constraints of ith particle
    if constr(1) ~= 0, line(([c(1), c(1)]),([c(2)-constrLength/2, c(2)+constrLength/2]),'Color',[ 0.2 0.2 0.2],'LineWidth',3);end
    if constr(2) ~= 0, line(([c(1)-constrLength/2, c(1)+constrLength/2]),([c(2), c(2)]),'Color',[ 0.2 0.2 0.2],'LineWidth',3);end
end

% visualize elements:

for i=1:nel
    
    ri=ind(i,1);si=ind(i,2);  % nodal numbers of element
    r=[(ri-1)*llsk+1,ri*llsk];s=[(si-1)*llsk+1,si*llsk]; % degrees of freedom in construction
    cr=cor(ri,:)'+U(r); cs=cor(si,:)'+U(s);   % coordinates of element nodes
    plot([cr(1),cs(1)] , [cr(2),cs(2)],'b-');     % visualize element
    
end




return
end